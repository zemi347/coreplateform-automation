package em_a_util;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import em_a_pages.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

import cremetestframework.CommonUtils;
import cremetestframework.DriverSingleton;

public class Supertest {

    // Pages fields declaration:
    protected AccountPage accountPage;
    protected ActivityPage activityPage;
    protected CaresWizard caresWizardPage;
    protected CommonUtils cu;
    protected DjangoPage djangoPage;
    protected EditorPage editorPage;
    protected EMHeaderPage emHeaderPage;
    protected ErrorPage errorPage;
    protected ExportPage exportPage;
    protected FilepickerPage filepickerPage;
    protected FileSystemPage fileSystemPage;
    protected GlopackPage glopackPage;
    protected GenericWizards genericWizards;
    protected HelpPage helpPage;
    protected ImportPage importPage;
    protected LogInPage logInPage;
    protected ModelsPage modelsPage;
    protected ProfilePage profilePage;
    protected ResultsViewerPage resultsViewerPage;
    protected TrashPage trashPage;
    protected ZohoEmailPage zohoPage;
    protected PDPEditorPage pdpEditorPage;
    protected REJVPage rejvPage;
    protected ChartToolPage chartToolPage;
    protected FoodDataScienceWizardPage fdsWizardPage;
    protected FilterPage filterPage;
    protected SupportCentrePage scPage;
    protected RIFMWizardPage rp;
    protected NestlePredictPage np;
    protected BaynPage bp;
    protected FaitPage fp;
    protected Tables tables;
    protected FiinPage fiin;

    // Other fields:
    protected ExtentReports report;
    public static ExtentTest logger;
    protected String testCaseStatus = "PASSED";
    protected String user;
    protected String userID;
    protected String otherOrgUser;
    protected String qaOrganisation;
    protected String otherOrganisation;
    protected String otherOrgUserID;
    protected String userInDifferentOrg;
    protected WebDriver driver = DriverSingleton.getDriver();
    //protected String ds = DriverSingleton;
    protected long time;
    DriverSingleton ds = new DriverSingleton();

    public Supertest() {
        super();
    }

    @BeforeClass(alwaysRun = true)
    public void beforeClassSetup() throws Exception {

        // Pages fields initialization:
        accountPage = new AccountPage(driver);
        activityPage = new ActivityPage(driver);
        caresWizardPage = new CaresWizard(driver);
        cu = new CommonUtils(driver);
        djangoPage = new DjangoPage(driver);
        editorPage = new EditorPage(driver);
        emHeaderPage = new EMHeaderPage(driver);
        errorPage = new ErrorPage(driver);
        exportPage = new ExportPage(driver);
        filepickerPage = new FilepickerPage(driver);
        fileSystemPage = new FileSystemPage(driver);
        genericWizards = new GenericWizards(driver);
        helpPage = new HelpPage(driver);
        importPage = new ImportPage(driver);
        logInPage = new LogInPage(driver);
        modelsPage = new ModelsPage(driver);
        profilePage = new ProfilePage(driver);
        resultsViewerPage = new ResultsViewerPage(driver);
        trashPage = new TrashPage(driver);
        zohoPage = new ZohoEmailPage(driver);
        pdpEditorPage = new PDPEditorPage(driver);
        rejvPage = new REJVPage(driver);
        chartToolPage = new ChartToolPage(driver);
        fdsWizardPage = new FoodDataScienceWizardPage(driver);
        filterPage = new FilterPage(driver);
        scPage = new SupportCentrePage(driver);
        rp = new RIFMWizardPage(driver);
        np = new NestlePredictPage(driver);
        bp = new BaynPage(driver);
        fp = new FaitPage(driver);
        glopackPage = new GlopackPage(driver);
        tables = new Tables(driver);
        time = System.currentTimeMillis();
        fiin = new FiinPage();
        //ds = new DriverSingleton();
        ds.analyzeLog();

        // driver.manage().window().maximize();
        driver.manage().window().setPosition(new Point(0, 0));
        driver.manage().window().setSize(new Dimension(1920, 1080));
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        // Set the deployment server
        CredentialsData.setDeploymentVariable();

        report = ExtentFactory.getInstance(this);

        logger = report.startTest("Create test user and login to EM.");

        logger.log(LogStatus.PASS, "Create test user.");
        user = CredentialsData.generateRandomPrefix("Automation.Tester@cremeglobal.com");
        qaOrganisation = CredentialsData.getValue("qaOrganisation");
        userID = UsersManipulationByAPI.createUser(user, qaOrganisation, new Object[]{"CARES NG", "REJV", "QA",
                "Food Data Science", "RIFM", "Fragrance Models", "Nest Predict", "CTDB_Approvers", "bayn", "FAIT"});

        System.out.println(getClass().getName() + " - Running... - using user: " + user);

        logger.log(LogStatus.PASS, "Login to EM.");
        driver.get(CredentialsData.getBaseURL());
        cu.writeValueToField(logInPage.emailTextBox, user);
        cu.writeValueToField(logInPage.passwordTextBox, CredentialsData.getValue("userPassword"));
        cu.clickElements(logInPage.logInButton);
        cu.verifyElementsAreDisplayed(fileSystemPage.myDataPageTitle);
    }

    @AfterMethod
    public void screenCap(ITestResult result) {

        if (result.getStatus() == ITestResult.FAILURE) {
            testCaseStatus = "FAILED";
            // System.out.println(System.getProperty("user.dir"));
            String screenshot_path = cremetestframework.Constants.captureScreenshot(result.getTestClass().getName());
            String imagePath = logger.addScreenCapture(screenshot_path);
            logger.log(LogStatus.FAIL, "Failed ", imagePath);
        }
    }

    public void screenshot(String screenshot_name){
        String screenshot_path = cremetestframework.Constants.captureScreenshot(screenshot_name);
        String imagePath = logger.addScreenCapture(screenshot_path);
        logger.log(LogStatus.INFO, "Screenshot: ", imagePath);
    }

    @AfterClass(alwaysRun = true)
    public void tearDown() throws Exception {
        System.out.println("Tearing down test " + getClass().getName() + "....");
        logger = report.startTest("Start tear down.");

        if (System.getProperty("browser") != null) {
            if (System.getProperty("browser").contains("edge")) {

                logger.log(LogStatus.PASS, "Go to home page and logout.");
                driver.get(CredentialsData.getBaseURL() + "file/my-data");
                cu.waitThenSingleClick(emHeaderPage.userProfileIconButton, 4);
                cu.clickElements(emHeaderPage.logoutButton);
                cu.waitFor(Duration.ofSeconds(2));
            }

        }
        logger.log(LogStatus.PASS, "Clear cache and delete user profile.");
        cremetestframework.Constants.deleteAllBrowserCookies();
        UsersManipulationByAPI.deleteUser(userID, user);
//        djangoPage.deleteUserProfile(user); //Commented by KK
        logger.log(LogStatus.PASS, "Tear Down Successfully.");

        report.endTest(logger);
        report.flush();
        time = System.currentTimeMillis() - time;
        if (CredentialsData.doTestsRunOnJenkins) { // log tests' results to MySQL only if they run from Jenkins
            String myThrowable = "null";
            DbGateway.getConnectionAndCreateStatement();
            DbGateway.dbinsert(
                    "INSERT INTO automation.testsrunstatuses (testname, teststatus, environment, stacktrace, time) VALUES ('"
                            + getClass().getName() + "','" + testCaseStatus + "','" + CredentialsData.deployment + "','"
                            + myThrowable + "','" + time + "')");
            DbGateway.connectionClose();
        }
        System.out.println(getClass().getName() + " - " + testCaseStatus + "     - using user: " + user + "\n");

    }

    @AfterSuite(alwaysRun = true)
    public void closeBrowser() {
        driver.close();
    }
}
